scalar DateTime

"""Esto representa un aeropuerto"""
type Aeropuerto {
    """Identificador de un aeropuerto"""
    id: ID!
    localizacion: String!
    rutas: [Ruta!]
    aviones: [Avion!]!
}

type Ruta {
    id: ID!
    fechaHoraSalida: DateTime!
    kilometros: Int!
}

type Avion {
    id: ID!
    matricula: String!
    velocidadHora: Int!
    pasajeros: [Pasajero!]!
}

type Pasajero {
    id: ID!
    nombre: String!
    apellido: String!
}
    """Connection DB"""
type User {
        email: String!
        name: String
        createAt: DateTime!
        post: [Post]
}

type Post {
    id: ID!
    title: String!
    content: String
    user: User!
}

input inputPost {
    title: String!
    content: String
}

type Query {
    """Retornara la lista de aeropuertos"""
    listarAeropuertos: [Aeropuerto!]!
    """Retornara el aeropuerto"""
    obtenerAeropuertoPorId(
        """Identificador de un aeropuerto"""
        id: ID!
    ): Aeropuerto
    obtenerAeropuerto(id: ID, localizacion: String): Aeropuerto
    allUsers: [User!]!
    allUsersPostgres: [User!]!
    allPost: [Post!]!
}

type Mutation {
    crearPasajero(idAvion: ID!, nombre: String, apellido: String): Pasajero
    actualizarVelocidadHora(idAvion: ID!, velocidadHora: Int): Avion!
    vaciarPasajeros(idAvion: ID!): Avion!
    addUser(name: String, email: String): User!
    addPostUser(title: String, content: String, email: String): Post!
    updateUser(name: String, email: String): User!
    """Este m√©todo sirve para eliminar un post de un usuario"""
    deletePost(id: Int):Post
}
